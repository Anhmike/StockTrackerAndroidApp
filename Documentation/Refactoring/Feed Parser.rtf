{\rtf1\ansi\ansicpg1252\deff0\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22\par
\pard\sa200\sl276\slmult1\qc\fs36 FeedParser Class before refactoring\fs22\par
\par
\pard\sa200\sl276\slmult1 package com.StockTake;\par
\par
import java.io.BufferedReader;\par
import java.io.IOException;\par
import java.io.InputStream;\par
import java.io.InputStreamReader;\par
import java.net.URL;\par
import java.nio.charset.Charset;\par
import java.util.Calendar;\par
import java.util.LinkedList;\par
import java.util.StringTokenizer;\par
import android.util.Log;\par
\par
public class FeedParser \{\par
\par
\tab public void getFeed(Finance toPopulate, String currentStock) \{\par
\tab\tab BufferedReader reader;\par
\tab\tab String csvData[] = null;\par
\par
\tab\tab reader = null;\par
\tab\tab csvData = null;\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvRealtime(currentStock);\par
\tab\tab\tab csvData = parseCsvRealtime(reader);\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\}\par
\tab\tab toPopulate.setLast((Float.parseFloat(csvData[1]))/100f);\par
\tab\tab toPopulate.setName(currentStock);\par
\tab\tab toPopulate.setInstantVolume(Integer.parseInt(csvData[2]));\par
\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvHistoric(currentStock, "Weekly");\par
\tab\tab\tab csvData = parseHistoricVolume(reader);\par
\tab\tab\} catch (Exception e) \{\par
\tab\tab\}\par
\tab\tab toPopulate.setClose((Float.parseFloat(csvData[0]) / 100f));\par
\tab\tab toPopulate.setVolume(Integer.parseInt(csvData[1]));\par
\par
\tab\}\par
\par
\tab public LinkedList<Float> getHistoricFeed(String currentStock, String time) \{\par
\tab\tab BufferedReader reader;\par
\tab\tab LinkedList<Float> csvHistoricList = new LinkedList<Float>();\par
\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvHistoric(currentStock, time);\par
\tab\tab\tab csvHistoricList = parseCsvHistoric(reader);\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\}\par
\tab\tab return csvHistoricList;\par
\tab\}\par
\par
\tab public BufferedReader getCsvHistoric(String stockSymbol, String timeFrame) \{\par
\tab\tab URL feedUrl = null;\par
\tab\tab InputStream is = null;\par
\par
\tab\tab Calendar cal = Calendar.getInstance();\par
\tab\tab int day = 0, month = 0, year = 0;\par
\par
\tab\tab if (timeFrame.equals("Weekly")) \{\par
\tab\tab\tab day = cal.get(Calendar.DAY_OF_MONTH) - 8;\par
\tab\tab\tab month = cal.get(Calendar.MONTH);\par
\tab\tab\tab year = cal.get(Calendar.YEAR);\par
\tab\tab\} else if (timeFrame.equals("Monthly")) \{\par
\tab\tab\tab day = cal.get(Calendar.DAY_OF_MONTH);\par
\tab\tab\tab month = cal.get(Calendar.MONTH) - 1;\par
\tab\tab\tab year = cal.get(Calendar.YEAR);\par
\tab\tab\} else if (timeFrame.equals("Yearly")) \{\par
\tab\tab\tab day = cal.get(Calendar.DAY_OF_MONTH);\par
\tab\tab\tab month = cal.get(Calendar.MONTH);\par
\tab\tab\tab year = cal.get(Calendar.YEAR) - 1;\par
\tab\tab\}\par
\par
\tab\tab try \{\par
\tab\tab\tab feedUrl = new URL("http://ichart.yahoo.com/table.csv?s="\par
\tab\tab\tab\tab\tab + stockSymbol + ".L&a=" + month + "&b=" + day + "&c="\par
\tab\tab\tab\tab\tab + year);\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\}\par
\tab\tab try \{\par
\tab\tab\tab is = feedUrl.openStream();\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\tab Log.e("error", e.toString());\par
\tab\tab\}\par
\par
\tab\tab return new BufferedReader(new InputStreamReader(is,\par
\tab\tab\tab\tab Charset.forName("UTF-8")));\par
\tab\}\par
\par
\tab public BufferedReader getCsvRealtime(String stockSymbol) throws IOException \{\par
\tab\tab // Generate URL\par
\tab\tab URL feedUrl = new URL("http://finance.yahoo.com/d/quotes.csv?s="+ stockSymbol + ".L&f=nb2b3va");\par
\par
\tab\tab InputStream is = feedUrl.openStream();\par
\par
\tab\tab return new BufferedReader(new InputStreamReader(is,\par
\tab\tab\tab\tab Charset.forName("UTF-8")));\par
\tab\}\par
\tab\par
\tab private LinkedList<Float> parseCsvHistoric(BufferedReader csvToParse)\par
\tab\tab\tab throws IOException \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int lineNumber = 0, tokenNumber = 0;\par
\tab\tab LinkedList<Float> historicList = new LinkedList<Float>();\par
\tab\tab while (((strLine = csvToParse.readLine()) != null)) \{\par
\tab\tab\tab lineNumber++;\par
\tab\tab\tab if (lineNumber != 1) \{\par
\tab\tab\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab\tab\tab String token;\par
\tab\tab\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab\tab\tab tokenNumber++;\par
\tab\tab\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab\tab\tab if (tokenNumber == 5) \{\par
\tab\tab\tab\tab\tab\tab historicList.addFirst(Float.parseFloat(token));\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab tokenNumber = 0;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab return historicList;\par
\tab\}\par
\par
\tab private String[] parseHistoricVolume(BufferedReader csvToParse)\par
\tab\tab\tab throws IOException \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int lineNumber = 0, tokenNumber = 0;\par
\tab\tab String[] csvData = new String[2];\par
\tab\tab while (((strLine = csvToParse.readLine()) != null)) \{\par
\tab\tab\tab lineNumber++;\par
\tab\tab\tab if (lineNumber == 2) \{\par
\tab\tab\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab\tab\tab String token;\par
\tab\tab\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab\tab\tab tokenNumber++;\par
\tab\tab\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab\tab\tab if (tokenNumber == 5) \{\par
\tab\tab\tab\tab\tab\tab csvData[0] = token;\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\tab if (tokenNumber == 6) \{\par
\tab\tab\tab\tab\tab\tab csvData[1] = token;\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab tokenNumber = 0;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab return csvData;\par
\tab\}\par
\par
\tab private String[] parseCsvRealtime(BufferedReader csvToParse) \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int tokenNumber = 0;\par
\tab\tab String csvdata[] = new String[4];\par
\par
\tab\tab try \{\par
\tab\tab\tab strLine = csvToParse.readLine();\par
\tab\tab\} catch (IOException e) \{\}\par
\tab\tab strLine = strLine.replace("\\"", "");\par
\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab String token;\par
\tab\tab float ask = 0f;\par
\tab\tab float bid = 0f;\par
\par
\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab if (tokenNumber == 0) \{\par
\tab\tab\tab\tab csvdata[0] = token; // name in first field\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 1) \{\par
\tab\tab\tab\tab ask = Float.parseFloat(token);\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 2) \{\par
\tab\tab\tab\tab bid = Float.parseFloat(token);\par
\tab\tab\tab\tab csvdata[1] = Float.toString((ask + bid) / 2); // price in second field\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 3) \{\par
\tab\tab\tab\tab csvdata[2] = token; // volume in third field\par
\tab\tab\tab\}\par
\tab\tab\tab tokenNumber++;\par
\tab\tab\}\par
\tab\tab return csvdata;\par
\tab\}\par
\}\par
\par
\pard\sa200\sl276\slmult1\qc\fs36 Refactored \fs22\par
\par
\pard\sa200\sl276\slmult1 package com.StockTake;\par
\par
import java.io.BufferedReader;\par
import java.io.IOException;\par
import java.io.InputStream;\par
import java.io.InputStreamReader;\par
import java.net.URL;\par
import java.nio.charset.Charset;\par
import java.util.Calendar;\par
import java.util.LinkedList;\par
import java.util.StringTokenizer;\par
import android.util.Log;\par
\par
public class FeedParser \{\par
\par
\tab public void getFeed(Finance toPopulate, String currentStock) \{\par
\tab\tab BufferedReader reader;\par
\tab\tab String csvData[] = null;\par
\par
\tab\tab reader = null;\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvHistoric(currentStock, "current");\par
\tab\tab\tab csvData = parseCsvRealtime(reader);\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\}\par
\tab\tab toPopulate.setLast((Float.parseFloat(csvData[1]))/100f);\par
\tab\tab toPopulate.setName(currentStock);\par
\tab\tab toPopulate.setInstantVolume(Integer.parseInt(csvData[2]));\par
\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvHistoric(currentStock, "Weekly");\par
\tab\tab\tab csvData = parseHistoricVolume(reader);\par
\tab\tab\} catch (Exception e) \{\par
\tab\tab\}\par
\tab\tab toPopulate.setClose((Float.parseFloat(csvData[0]) / 100f));\par
\tab\tab toPopulate.setVolume(Integer.parseInt(csvData[1]));\par
\par
\tab\}\par
\par
\tab public LinkedList<Float> getHistoricFeed(String currentStock, String time) \{\par
\tab\tab BufferedReader reader;\par
\tab\tab LinkedList<Float> csvHistoricList = new LinkedList<Float>();\par
\par
\tab\tab try \{\par
\tab\tab\tab reader = getCsvHistoric(currentStock, time);\par
\tab\tab\tab csvHistoricList = parseCsvHistoric(reader);\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\}\par
\tab\tab return csvHistoricList;\par
\tab\}\par
\par
\tab public BufferedReader getCsvHistoric(String stockSymbol, String timeFrame) \{\par
\tab\tab URL feedUrl = null;\par
\tab\tab InputStream is = null;\par
\par
\tab\tab Calendar cal = Calendar.getInstance();\par
\tab\tab int day = 0, month = 0, year = 0;\par
\tab\tab\par
\tab\tab day = cal.get(Calendar.DAY_OF_MONTH);\par
\tab\tab month = cal.get(Calendar.MONTH);\par
\tab\tab year = cal.get(Calendar.YEAR);\par
\par
\tab\tab if (timeFrame.equals("Weekly")) \{\par
\tab\tab\tab day = cal.get(Calendar.DAY_OF_MONTH) - 8;\par
\tab\tab\} else if (timeFrame.equals("Monthly")) \{\par
\tab\tab\tab month = cal.get(Calendar.MONTH) - 1;\par
\tab\tab\} else if (timeFrame.equals("Yearly")) \{\par
\tab\tab\tab year = cal.get(Calendar.YEAR) - 1;\par
\tab\tab\}else if (timeFrame.equals("current"))\par
\tab\tab\{\par
\tab\tab\tab try\{\par
\tab\tab\tab\tab URL feedUrl = new URL("http://finance.yahoo.com/d/quotes.csv?s="+ stockSymbol + ".L&f=nb2b3va");\par
\tab\tab\tab\tab InputStream is = feedUrl.openStream();\par
\tab\tab\tab\tab catch(IOException e)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab Log.e("error", e.toString());\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab return new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));\par
\tab\tab\}\par
\par
\tab\tab try \{\par
\tab\tab\tab feedUrl = new URL("http://ichart.yahoo.com/table.csv?s="+ stockSymbol + ".L&a=" + month + "&b=" + day + "&c="+ year);\par
\tab\tab\tab is = feedUrl.openStream();\par
\tab\tab\} catch (IOException e) \{\par
\tab\tab\tab Log.e("error", e.toString());\par
\tab\tab\}\par
\par
\tab\tab return new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));\par
\tab\}\par
\par
\tab\par
\tab private LinkedList<Float> parseCsvHistoric(BufferedReader csvToParse)\par
\tab\tab\tab throws IOException \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int lineNumber = 0, tokenNumber = 0;\par
\tab\tab LinkedList<Float> historicList = new LinkedList<Float>();\par
\tab\tab while (((strLine = csvToParse.readLine()) != null)) \{\par
\tab\tab\tab lineNumber++;\par
\tab\tab\tab if (lineNumber != 1) \{\par
\tab\tab\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab\tab\tab String token;\par
\tab\tab\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab\tab\tab tokenNumber++;\par
\tab\tab\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab\tab\tab if (tokenNumber == 5) \{\par
\tab\tab\tab\tab\tab\tab historicList.addFirst(Float.parseFloat(token));\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab tokenNumber = 0;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab return historicList;\par
\tab\}\par
\par
\tab private String[] parseHistoricVolume(BufferedReader csvToParse)\par
\tab\tab\tab throws IOException \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int lineNumber = 0, tokenNumber = 0;\par
\tab\tab String[] csvData = new String[2];\par
\tab\tab while (((strLine = csvToParse.readLine()) != null)) \{\par
\tab\tab\tab lineNumber++;\par
\tab\tab\tab if (lineNumber == 2) \{\par
\tab\tab\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab\tab\tab String token;\par
\tab\tab\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab\tab\tab tokenNumber++;\par
\tab\tab\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab\tab\tab if (tokenNumber == 5) \{\par
\tab\tab\tab\tab\tab\tab csvData[0] = token;\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\tab if (tokenNumber == 6) \{\par
\tab\tab\tab\tab\tab\tab csvData[1] = token;\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab tokenNumber = 0;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab return csvData;\par
\tab\}\par
\par
\tab private String[] parseCsvRealtime(BufferedReader csvToParse) \{\par
\tab\tab String strLine = "";\par
\tab\tab StringTokenizer st = null;\par
\tab\tab int tokenNumber = 0;\par
\tab\tab String csvdata[] = new String[4];\par
\par
\tab\tab try \{\par
\tab\tab\tab strLine = csvToParse.readLine();\par
\tab\tab\} catch (IOException e) \{\}\par
\tab\tab strLine = strLine.replace("\\"", "");\par
\tab\tab st = new StringTokenizer(strLine, ",");\par
\tab\tab String token;\par
\tab\tab float ask = 0f;\par
\tab\tab float bid = 0f;\par
\par
\tab\tab while (st.hasMoreTokens()) \{\par
\tab\tab\tab token = st.nextToken();\par
\tab\tab\tab if (tokenNumber == 0) \{\par
\tab\tab\tab\tab csvdata[0] = token; // name in first field\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 1) \{\par
\tab\tab\tab\tab ask = Float.parseFloat(token);\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 2) \{\par
\tab\tab\tab\tab bid = Float.parseFloat(token);\par
\tab\tab\tab\tab csvdata[1] = Float.toString((ask + bid) / 2); // price in second field\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\par
\tab\tab\tab\}\par
\tab\tab\tab if (tokenNumber == 3) \{\par
\tab\tab\tab\tab csvdata[2] = token; // volume in third field\par
\tab\tab\tab\}\par
\tab\tab\tab tokenNumber++;\par
\tab\tab\}\par
\tab\tab return csvdata;\par
\tab\}\par
\}\par
}
 